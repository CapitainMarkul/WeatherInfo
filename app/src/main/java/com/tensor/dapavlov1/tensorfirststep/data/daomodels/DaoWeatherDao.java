package com.tensor.dapavlov1.tensorfirststep.data.daomodels;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Weather".
*/
public class DaoWeatherDao extends AbstractDao<DaoWeather, Long> {

    public static final String TABLENAME = "Weather";

    /**
     * Properties of entity DaoWeather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WindShort = new Property(1, String.class, "windShort", false, "WIND_SHORT");
        public final static Property WindSpeed = new Property(2, double.class, "windSpeed", false, "WIND_SPEED");
        public final static Property Pressure = new Property(3, double.class, "pressure", false, "PRESSURE");
        public final static Property Temperature = new Property(4, double.class, "temperature", false, "TEMPERATURE");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property IconUrl = new Property(7, String.class, "iconUrl", false, "ICON_URL");
        public final static Property IconCode = new Property(8, String.class, "iconCode", false, "ICON_CODE");
        public final static Property Description = new Property(9, String.class, "description", false, "DESCRIPTION");
        public final static Property CityId = new Property(10, Long.class, "cityId", false, "CITY_ID");
    }

    private Query<DaoWeather> daoCity_WeathersQuery;

    public DaoWeatherDao(DaoConfig config) {
        super(config);
    }
    
    public DaoWeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Weather\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WIND_SHORT\" TEXT NOT NULL ," + // 1: windShort
                "\"WIND_SPEED\" REAL NOT NULL ," + // 2: windSpeed
                "\"PRESSURE\" REAL NOT NULL ," + // 3: pressure
                "\"TEMPERATURE\" REAL NOT NULL ," + // 4: temperature
                "\"DATE\" TEXT NOT NULL ," + // 5: date
                "\"TIME\" TEXT NOT NULL ," + // 6: time
                "\"ICON_URL\" TEXT NOT NULL ," + // 7: iconUrl
                "\"ICON_CODE\" TEXT NOT NULL ," + // 8: iconCode
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 9: description
                "\"CITY_ID\" INTEGER NOT NULL );"); // 10: cityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Weather\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaoWeather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWindShort());
        stmt.bindDouble(3, entity.getWindSpeed());
        stmt.bindDouble(4, entity.getPressure());
        stmt.bindDouble(5, entity.getTemperature());
        stmt.bindString(6, entity.getDate());
        stmt.bindString(7, entity.getTime());
        stmt.bindString(8, entity.getIconUrl());
        stmt.bindString(9, entity.getIconCode());
        stmt.bindString(10, entity.getDescription());
        stmt.bindLong(11, entity.getCityId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaoWeather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWindShort());
        stmt.bindDouble(3, entity.getWindSpeed());
        stmt.bindDouble(4, entity.getPressure());
        stmt.bindDouble(5, entity.getTemperature());
        stmt.bindString(6, entity.getDate());
        stmt.bindString(7, entity.getTime());
        stmt.bindString(8, entity.getIconUrl());
        stmt.bindString(9, entity.getIconCode());
        stmt.bindString(10, entity.getDescription());
        stmt.bindLong(11, entity.getCityId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DaoWeather readEntity(Cursor cursor, int offset) {
        DaoWeather entity = new DaoWeather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // windShort
            cursor.getDouble(offset + 2), // windSpeed
            cursor.getDouble(offset + 3), // pressure
            cursor.getDouble(offset + 4), // temperature
            cursor.getString(offset + 5), // date
            cursor.getString(offset + 6), // time
            cursor.getString(offset + 7), // iconUrl
            cursor.getString(offset + 8), // iconCode
            cursor.getString(offset + 9), // description
            cursor.getLong(offset + 10) // cityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaoWeather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWindShort(cursor.getString(offset + 1));
        entity.setWindSpeed(cursor.getDouble(offset + 2));
        entity.setPressure(cursor.getDouble(offset + 3));
        entity.setTemperature(cursor.getDouble(offset + 4));
        entity.setDate(cursor.getString(offset + 5));
        entity.setTime(cursor.getString(offset + 6));
        entity.setIconUrl(cursor.getString(offset + 7));
        entity.setIconCode(cursor.getString(offset + 8));
        entity.setDescription(cursor.getString(offset + 9));
        entity.setCityId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DaoWeather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DaoWeather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaoWeather entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "weathers" to-many relationship of DaoCity. */
    public List<DaoWeather> _queryDaoCity_Weathers(Long cityId) {
        synchronized (this) {
            if (daoCity_WeathersQuery == null) {
                QueryBuilder<DaoWeather> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CityId.eq(null));
                daoCity_WeathersQuery = queryBuilder.build();
            }
        }
        Query<DaoWeather> query = daoCity_WeathersQuery.forCurrentThread();
        query.setParameter(0, cityId);
        return query.list();
    }

}
